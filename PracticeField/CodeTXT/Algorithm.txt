//Greedy algo
---------------------
Fractional Knapsac 
-------------------------
using System;


namespace PracticeField
{
    public class item
    {
        public int value;
        public int weight;

        public item(int value, int weight)
        {
            this.value = value;
            this.weight = weight;
        }
    }
    public class CodeForces
    {
       
        public static int comp(item item1, item item2)
        {
            double r1 = item1.value / item1.weight;
            double r2 = item2.value / item2.weight;
            return r1 > r2?-1:0;
        }

        public static double fKnapsac(item[] items,int w)
        {
            double totalVal = 0f;
            int currentW = 0;
            Array.Sort(items,comp);

            foreach(item i in items)
            {
                float remaining = w - currentW;
                if(i.weight<=remaining)
                {
                    totalVal += (double)i.value;
                    currentW += i.weight;
                }
                else
                {
                    if (remaining == 0)
                        break;

                    double fraction = remaining / (double)i.weight;
                    totalVal += fraction * (double)i.value;                 //profit calculation
                    currentW += (int)(fraction * (double)i.weight);
                }
            }
            return totalVal;
        }
        public static void Main(string[] args)
        {
            item[] arr = { new item(60, 10),
                   new item(100, 20),
                   new item(120, 30) };

            Console.WriteLine("Maximum value we can obtain = " +
                              fKnapsac(arr, 50));

        }
    }
}

---------------------------------------------------------------------------------------------------------------
0-1 knapsac
https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/
---------------------------------------------------------

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Linq;
using System.Text;

namespace PracticeField
{
    
    public class CodeForces
    {

        static int max(int a, int b)
        {
            return (a > b) ? a : b;
        }

        static int knapSack(int bagWeight,  int[] itemWeight, int[] itemValue, int numberofItems)
        {
            if (numberofItems == 0 || bagWeight == 0)
                return 0;

            if (itemWeight[numberofItems - 1] > bagWeight)
                return knapSack(bagWeight,  itemWeight, itemValue, numberofItems - 1);

            else
                return max(itemValue[numberofItems - 1] +
                    knapSack(bagWeight - itemWeight[numberofItems - 1],  itemWeight, itemValue, numberofItems - 1),
                    knapSack(bagWeight,  itemWeight, itemValue, numberofItems - 1));
        }

        

        public static void Main()
        {
            int[] val = new int[] { 60, 100, 120 };
            int[] wt = new int[] { 10, 20, 30 };
            int W = 50;
            int n = val.Length;

            Console.WriteLine(knapSack(W, wt, val, n));
        }
    }
}

-----------------

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Linq;
using System.Text;

namespace PracticeField
{
    
    public class CodeForces
    {

        static int knapSack(int bagWeight, int[] itemWeight, int[] itemValue, int numberofItems)
        {
            int[] dp = new int[bagWeight+1];
            for(int i=1;i<numberofItems+1;i++)
            {
                for(int w=bagWeight;w>=0;w--)
                {
                    if (itemWeight[i - 1] <= w)
                        dp[w] = Math.Max(dp[bagWeight], dp[w-itemWeight[i-1]]+itemValue[i-1]);
                }
                
            }
            return dp[bagWeight];
        }

        

        public static void Main()
        {
            int[] val = new int[] { 60, 100, 120 };
            int[] wt = new int[] { 10, 20, 30 };
            int W = 50;
            int n = val.Length;

            Console.Write(knapSack(W, wt, val, n));
        }
    }
}



//https://www.geeksforgeeks.org/browserstack-placement-paper/?ref=lbp

--------------------------------------------------------------------------------------------------------------------------
unbounded knapsack

--------------------------------------------------------------------------------------------------------------------------
Subset of an Array
--------------------
Iterative way

https://www.youtube.com/watch?v=kYY9DotIKlo&list=PLzffTJx5aHaSJ4XaG55cI3Z0VrNOyLWpH

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PracticeField
{
    
    public class CodeForces
    {

      public static List<List<int>> subSetofArray(int[] arr)
        {
            List<List<int>> res = new List<List<int>>();//power set
            res.Add(new List<int>());// adding empty set to power set

            foreach(int num in arr)// each element of the array
            {
                int n = res.Count();
                for(int j=0;j<n;j++)
                {
                    List<int> temp = new List<int>(res.ElementAt(j));
                    temp.Add(num);
                    res.Add(temp);
                }
            }
            return res;

        }

        public static void Main()
        {
            int[] arr = {1, 2, 3,4};
            int gap = 4;
            string msg = "there is a boy";
           // Console.WriteLine(subSetofArray(arr));
            foreach(var obj in subSetofArray(arr).SelectMany(l=>l.Select(o=>o)))
            {
                Console.WriteLine("["+obj+"]");
            }
        }
    }
}


--------------------------------------------------------------------------------------------------------------






